// Generated by CoffeeScript 1.6.2
(function() {
  var dataAll, dataGet, dataSet, deepMixin, elements, flatLookup, getOuterHTML, load, refresh, replaceValues, strings, t7e, translate,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  strings = {};

  elements = 'div h1 h2 h3 h4 h5 h6 p li td img span a strong b em i'.split(/\s+/);

  dataSet = function(el, key, value) {
    return el.setAttribute("data-t7e-" + (key.toLowerCase()), value);
  };

  dataGet = function(el, key) {
    return el.getAttribute("data-t7e-" + (key.toLowerCase()));
  };

  dataAll = function(el) {
    var attr, data, _i, _len, _ref;

    data = {};
    _ref = el.attributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attr = _ref[_i];
      if ((attr.name.indexOf('data-t7e-')) === 0) {
        data[attr.name.slice('data-t7e-'.length)] = attr.value;
      }
    }
    return data;
  };

  deepMixin = function(base, mixin) {
    var key, value;

    for (key in mixin) {
      if (!__hasProp.call(mixin, key)) continue;
      value = mixin[key];
      if (typeof value === 'string') {
        base[key] = value;
      } else {
        if (!(key in base)) {
          base[key] = {};
        }
        deepMixin(base[key], value);
      }
    }
    return base;
  };

  flatLookup = function(object, key) {
    var keys, _i, _len;

    keys = key.split('.');
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      object = object[key];
    }
    return object;
  };

  replaceValues = function(string, values) {
    var key, value;

    for (key in values) {
      value = values[key];
      if ((key.charAt(0)) === '$') {
        string = string.replace(key, value, 'gi');
      }
    }
    return string;
  };

  getOuterHTML = function(element) {
    var container;

    container = document.createElement('div');
    container.appendChild(element);
    return container.innerHTML;
  };

  translate = function() {
    var element, name, nodeName, options, params, property, translationKey, value, values, _i, _len;

    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof params[0] === 'string') {
      translationKey = params[0], values = params[1];
      return replaceValues(flatLookup(strings, translationKey), values);
    } else {
      options = params[0];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        name = elements[_i];
        if (name in options) {
          nodeName = name;
        }
      }
      translationKey = options[nodeName];
      element = document.createElement(nodeName);
      element.innerHTML = replaceValues(flatLookup(strings, translationKey), options);
      dataSet(element, 'key', translationKey);
      for (property in options) {
        value = options[property];
        if (property !== nodeName) {
          if (property.charAt(0) === '$') {
            dataSet(element, "var-" + property.slice(1), value);
          } else {
            dataSet(element, "attr-" + property, value);
            element.setAttribute(property, translate(value));
          }
        }
      }
      return getOuterHTML(element);
    }
  };

  refresh = function(root) {
    var attr, attrName, attrs, dataAttr, element, key, keyedElements, options, value, varName, _i, _len, _ref, _results;

    if (root == null) {
      root = document.body;
    }
    keyedElements = Array.prototype.slice.call(root.querySelectorAll('[data-t7e-key]'));
    _results = [];
    for (_i = 0, _len = keyedElements.length; _i < _len; _i++) {
      element = keyedElements[_i];
      key = dataGet(element, 'key');
      options = {};
      attrs = {};
      _ref = dataAll(element);
      for (dataAttr in _ref) {
        value = _ref[dataAttr];
        if ((dataAttr.indexOf('var-')) === 0) {
          varName = dataAttr.slice('var-'.length);
          options["$" + varName] = value;
        } else if ((dataAttr.indexOf('attr-')) === 0) {
          attrName = dataAttr.slice('attr-'.length);
          attrs[attrName] = value;
        }
      }
      element.innerHTML = translate(key, options);
      _results.push((function() {
        var _results1;

        _results1 = [];
        for (attr in attrs) {
          value = attrs[attr];
          _results1.push(element.setAttribute(attr, translate(value)));
        }
        return _results1;
      })());
    }
    return _results;
  };

  load = function() {
    var additions, newStrings, _i, _len, _results;

    newStrings = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = newStrings.length; _i < _len; _i++) {
      additions = newStrings[_i];
      _results.push(deepMixin(strings, additions));
    }
    return _results;
  };

  t7e = translate;

  t7e.strings = strings;

  t7e.deepMixin = deepMixin;

  t7e.flatLookup = flatLookup;

  t7e.replaceValues = replaceValues;

  t7e.getOuterHTML = getOuterHTML;

  t7e.refresh = refresh;

  t7e.load = load;

  if (typeof window !== "undefined" && window !== null) {
    window.t7e = t7e;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = t7e;
  }

}).call(this);
