// Generated by CoffeeScript 1.6.3
(function() {
  var DOMPurify, getAllData, getData, load, refresh, setData, strings, translate,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  strings = {};

  DOMPurify = window.DOMPurify || require('dompurify')(window);

  setData = function(el, key, value) {
    return el.setAttribute("data-t7e-" + (key.toLowerCase()), value);
  };

  getData = function(el, key) {
    return el.getAttribute("data-t7e-" + (key.toLowerCase()));
  };

  getAllData = function(el) {
    var attr, data, _i, _len, _ref;
    data = {};
    _ref = el.attributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attr = _ref[_i];
      if ((attr.name.indexOf('data-t7e-')) !== 0) {
        continue;
      }
      data[attr.name.slice('data-t7e-'.length)] = attr.value;
    }
    return data;
  };

  translate = function(tag, key, attrs, transform) {
    var arg, attribute, classNames, element, result, segment, segments, tagName, typesOfArgs, value, variable, _i, _len, _ref, _ref1;
    typesOfArgs = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        _results.push(typeof arg);
      }
      return _results;
    }).apply(this, arguments)).join(' ');
    _ref = (function() {
      switch (typesOfArgs) {
        case 'string string object function':
          return arguments;
        case 'string string object':
          return __slice.call(arguments).concat([null]);
        case 'string string function':
          return [arguments[0], arguments[1], {}, arguments[2]];
        case 'string object function':
          return [null].concat(__slice.call(arguments));
        case 'string string':
          return __slice.call(arguments).concat([{}], [null]);
        case 'string object':
          return [null].concat(__slice.call(arguments), [null]);
        case 'string function':
          return [null, arguments[0], {}, arguments[1]];
        case 'string':
          return [null].concat(__slice.call(arguments), [{}], [null]);
        default:
          throw new Error("Couldn't unpack translate arguments (" + typesOfArgs + ")");
      }
    }).apply(this, arguments), tag = _ref[0], key = _ref[1], attrs = _ref[2], transform = _ref[3];
    if (tag != null) {
      _ref1 = tag.split('.'), tagName = _ref1[0], classNames = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      element = document.createElement(tagName);
      element.className = classNames.join(' ');
      setData(element, 'key', key);
      for (attribute in attrs) {
        value = attrs[attribute];
        attribute = (attribute.charAt(0)) === '$' ? "var-" + attribute.slice(1) : "attr-" + attribute;
        setData(element, attribute, value);
      }
      if (transform != null) {
        setData(element, 'transform', transform.toString());
      }
      refresh(element);
      return element.outerHTML;
    } else {
      segments = key.split('.');
      result = strings;
      for (_i = 0, _len = segments.length; _i < _len; _i++) {
        segment = segments[_i];
        if (result != null) {
          result = result[segment];
        }
      }
      if (result == null) {
        result = key;
      }
      if (!attrs._literal) {
        for (variable in attrs) {
          value = attrs[variable];
          if (variable.charAt(0) === '$') {
            result = result.replace(variable, translate(value), 'gi');
          }
        }
      }
      if (transform) {
        result = transform(result);
      }
      return DOMPurify.sanitize(result);
    }
  };

  refresh = function(root, options) {
    var attrName, attrs, dataAttr, element, key, keyedElements, optName, property, transform, value, varName, _i, _len, _ref, _results;
    if (root == null) {
      root = document.body;
    }
    if (options == null) {
      options = {};
    }
    keyedElements = (function() {
      var _i, _len, _ref, _results;
      _ref = root.querySelectorAll('[data-t7e-key]');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(element);
      }
      return _results;
    })();
    if (getData(root, 'key') != null) {
      keyedElements.unshift(root);
    }
    _results = [];
    for (_i = 0, _len = keyedElements.length; _i < _len; _i++) {
      element = keyedElements[_i];
      attrs = {};
      for (property in options) {
        value = options[property];
        attrs[property] = value;
      }
      _ref = getAllData(element);
      for (dataAttr in _ref) {
        value = _ref[dataAttr];
        if (dataAttr.indexOf('var-') === 0) {
          varName = dataAttr.slice('var-'.length);
          attrs["$" + varName] = value;
        } else if (dataAttr.indexOf('attr-') === 0) {
          attrName = dataAttr.slice('attr-'.length);
          attrs[attrName] = value;
        } else if (dataAttr.indexOf('opt-') === 0) {
          optName = dataAttr.slice('opt-'.length);
          attrs[optName] = value;
        }
      }
      key = getData(element, 'key');
      transform = eval("(" + (getData(element, 'transform')) + ")");
      if (key) {
        element.innerHTML = transform != null ? translate(key, attrs, transform) : translate(key, attrs);
      }
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (property in attrs) {
          value = attrs[property];
          if (!(property.charAt(0) !== '_')) {
            continue;
          }
          if ((property.charAt(0)) === '$') {
            continue;
          }
          _results1.push(element.setAttribute(property, translate(value, attrs)));
        }
        return _results1;
      })());
    }
    return _results;
  };

  load = function(newStringSet, _base) {
    var key, value, _results;
    if (_base == null) {
      _base = strings;
    }
    _results = [];
    for (key in newStringSet) {
      if (!__hasProp.call(newStringSet, key)) continue;
      value = newStringSet[key];
      if ((typeof value === 'string') || (value instanceof Array)) {
        _results.push(_base[key] = value);
      } else {
        if (!(key in _base)) {
          _base[key] = {};
        }
        _results.push(load(value, _base[key]));
      }
    }
    return _results;
  };

  translate.strings = strings;

  translate.refresh = refresh;

  translate.load = load;

  translate.getData = getData;

  translate.setData = setData;

  translate.getAllData = getAllData;

  window.t7e = translate;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = translate;
  }

}).call(this);
